import torch
from torch.utils.data import TensorDataset
from avalanche.benchmarks.utils import AvalancheTensorDataset
from loader import get_datasets
from torchvision import transforms
from torchvision.transforms import ToTensor, Resize
from di_benchmark import di_benchmark
from avalanche.training.plugins import EvaluationPlugin
from avalanche.training.utils import adapt_classification_layer
from torch.nn import CrossEntropyLoss
from torch.optim import Adam
from models.TorchCNN import TorchCNN
from avalanche.benchmarks.classic import PermutedMNIST
from avalanche.logging import InteractiveLogger, TensorboardLogger
from avalanche.training.supervised.strategy_wrappers import SynapticIntelligence
from Trainer import Trainer
from avalanche.evaluation.metrics import (
    forgetting_metrics,
    accuracy_metrics,
    loss_metrics,
)




train1, test1 = get_datasets("data/baza1")
train2, test2 = get_datasets("data/baza2")
train_set = [train1, train2]
test_set = [test1, test2]

device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")



model = TorchCNN()
adapt_classification_layer(model, 2, bias=False)

my_logger = TensorboardLogger(
    tb_log_dir="logs_example_SynapticIntelligence"
)
interactive_logger = InteractiveLogger()
evaluation_plugin = EvaluationPlugin(
    accuracy_metrics(
        minibatch=True, epoch=True, experience=True, stream=True
    ),
    loss_metrics(minibatch=True, epoch=True, experience=True, stream=True),
    forgetting_metrics(experience=True),
    loggers=[my_logger, interactive_logger],
)

cl_strategy = SynapticIntelligence(
    model,
    Adam(model.parameters(), lr=0.001),
    CrossEntropyLoss(),
    si_lambda=0.0001,
    train_mb_size=2,
    train_epochs=4,
    eval_mb_size=2,
    device=device,
    evaluator=evaluation_plugin,
)

trainer = Trainer(model, train_set, test_set,device)
results = trainer.train(cl_strategy)