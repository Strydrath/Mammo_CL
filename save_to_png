

import pandas as pd
import numpy as np
import os
import shutil
from glob import glob
from tqdm import tqdm
import cv2
import matplotlib.pyplot as plt
import seaborn as sns
from colorama import Fore, Back, Style
from PIL import Image
from pydicom import dcmread
from pydicom.dataset import FileDataset
from skimage import measure
from pydicom.pixel_data_handlers.util import apply_modality_lut, apply_voi_lut, apply_windowing
import pydicom


dataset_dir = 'F:\\federaated\\bd\\dicom\\vindr\\images'


#def build_path(folder, file, parent=dataset_dir):
 #   return dataset_dir+"/"+folder+"/"+file+".dicom"
#df['image_path'] = df.apply(lambda x: build_path(x.study_id, x.image_id), axis=1)

#df = pd.read_csv("F:\\federaated\\bd\\dicom\\vindr\\finding_annotations.csv")
df = pd.read_csv("C:\\Users\\Radek\\Downloads\\finding_annotations.csv")
print(df.head(10))
def load_image_pydicom(img_path, voi_lut=False, modality_lut=False, windowing=False):
    dataset = pydicom.dcmread(img_path)
    # print(dataset)
    metadata = retrieve_metadata(dataset)
    img = dataset.pixel_array
    if voi_lut:
        img = apply_voi_lut(img, dataset)
    if modality_lut:
        img = apply_modality_lut(img, dataset)
    if windowing:
        img = apply_windowing(img, dataset)
    if dataset.PhotometricInterpretation == "MONOCHROME1":
        img = np.amax(img) - img

    return img

def retrieve_metadata(metadata):

    data = dict()

    if 'PatientID' in metadata:
        data['patient_id'] = metadata.PatientID
    if 'Manufacturer' in metadata:
        data['manufacturer'] = metadata.Manufacturer
    if 'PatientAge' in metadata:
        data['age'] = metadata.PatientAge[:-1]
    if 'ViewPosition' in metadata:
        data['view_position'] = metadata.ViewPosition
    if 'StudyInstanceUID' in metadata:
        data['study_id'] = metadata.StudyInstanceUID
    if 'SeriesInstanceUID' in metadata:
        data['series_id'] = metadata.SeriesInstanceUID
    if 'ImageLaterality' in metadata:
        data['laterality'] = metadata.ImageLaterality

    return data    
#def load_image_pydicom(img_path, voi_lut=False):
#   dataset = pydicom.dcmread(img_path)
#    img = dataset.pixel_array
#
#    if dataset.PhotometricInterpretation == "MONOCHROME1":
#       img = apply_voi_lut(img, dataset, prefer_lut = True)
#       img = np.amax(img) - img
#
#    if dataset.PhotometricInterpretation=="MONOCHROME2":
#        img = apply_voi_lut(img, dataset, prefer_lut = True)
#        img = apply_windowing(img, dataset)

#    return img.astype(np.uint16)

def save_16_bit_png_file(img_data, file_path, debug=False):
    array_buffer = img_data.tobytes()
    if debug:
        print(len(array_buffer))
        print(img_data.T.shape)
    img = Image.new("I", img_data.T.shape)
    img.frombytes(array_buffer, 'raw', "I;16")
    resize = (256, 256)
    img = img.resize(resize)
    arr = np.asarray(img)
    
    plt.imsave(file_path, arr, cmap='gray')

    # Get the current directory
current_directory = os.getcwd()

# Define the source and destination folders
#source_folder = current_directory
source_folder = 'F:\\federaated\\bd\\dicom\\vindr\\images'
destination_no_cancer_16bit = 'F:\\dataset\\No_Cancer'
destination_cancer_16bit = 'F:\\dataset\\Cancer'
#destination_no_cancer_npz = 'F:\\dataset\\No_Cancer_NPZ'
#destination_cancer_npz = 'F:\\dataset\\Cancer_NPZ'

# Create destination folders if they don't exist
os.makedirs(destination_no_cancer_16bit, exist_ok=True)
os.makedirs(destination_cancer_16bit, exist_ok=True)
#os.makedirs(destination_no_cancer_npz, exist_ok=True)
#os.makedirs(destination_cancer_npz, exist_ok=True)

count_no_cancer = 0
count_cancer = 0

# Iterate through each row in the DataFrame
for index, row in df.iterrows():
    study_id = str(row['study_id'])
    image_id = str(row['image_id'])
    finding_categories = row['finding_categories']

    # Construct the path to the source DICOM image
    source_image_path = os.path.join(source_folder, study_id, image_id + '.dicom')
    

    # Check if the source DICOM image exists
    if not os.path.isfile(source_image_path):
        continue

    # Read image
    img = load_image_pydicom(source_image_path, True)

    # Determine the destination folder based on 'finding_categories'
    if finding_categories == "['No Finding']":
        destination_folder_16bit = destination_no_cancer_16bit
        #destination_folder_npz = destination_no_cancer_npz
        count_no_cancer += 1
    else:
        destination_folder_16bit = destination_cancer_16bit
        #destination_folder_npz = destination_cancer_npz
        count_cancer += 1

    # Construct the path to the destination folder
    destination_path_16bit = os.path.join(destination_folder_16bit, image_id + '.png')
    #destination_path_npz = os.path.join(destination_folder_npz, image_id)

    # Save the 16bit PNG image to the appropriate folder
    img_save = save_16_bit_png_file(img, destination_path_16bit)

    # Save the 16bit data in an NPZ file format
    #npz_savez = np.savez(destination_path_npz, img)

print("Images saved successfully.")
print(f"Saved {count_no_cancer} images without cancer.")
print(f"Saved {count_cancer} images with cancer.")